{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"k8tlery","text":"<p>Dissect container images, runtimes, and orchestrators.</p>"},{"location":"#inventory","title":"Inventory","text":"tool scope description trivy Find vulnerabilities, misconfigurations, secrets, SBOM in containers, Kubernetes, code repositories, clouds and more. syft CLI tool and library for generating a Software Bill of Materials from container images and filesystems. grype A vulnerability scanner for container images and filesystems. kube-bench Checks whether Kubernetes is deployed according to security best practices as defined in the CIS Kubernetes Benchmark. checkov Prevent cloud misconfigurations and find vulnerabilities during build-time in infrastructure as code, container images and open source packages with Checkov by Bridgecrew. kubeaudit kubeaudit helps you audit your Kubernetes clusters against common security controls. cosign Container Signing. kdigger Kubernetes focused container assessment and context discovery tool for penetration testing. kubectl Kubernetes provides a command line tool for communicating with a Kubernetes cluster's control plane, using the Kubernetes API. docker Command line interface for interacting with docker container images. podman A tool for managing OCI containers and pods. dive A tool for exploring a docker image, layer contents, and discovering ways to shrink the size of your Docker/OCI image. crictl CLI and validation tools for Kubelet Container Runtime Interface (CRI). KubiScan A tool to scan Kubernetes cluster for risky permissions. Docker Bench Security The Docker Bench for Security is a script that checks for dozens of common best-practices around deploying Docker containers in production. peirates Peirates, a Kubernetes penetration tool, enables an attacker to escalate privilege and pivot through a Kubernetes cluster. It automates known techniques to steal and collect service account tokens, secrets, obtain further code execution, and gain control of the cluster. TruffleHog Find and verify credentials. TruffleHog3 This is an enhanced version of the Python-based truffleHog scanner. Popeye A Kubernetes cluster resource sanitizer. k9s Kubernetes CLI To Manage Your Clusters In Style. Hadolint Dockerfile linter, validate inline bash, written in Haskell. Conftest Write tests against structured configuration data using the Open Policy Agent Rego query language. audit2rbac Autogenerate RBAC policies based on Kubernetes audit logs. kubeshark The API traffic analyzer for Kubernetes providing real-time K8s protocol-level visibility, capturing and monitoring all traffic and payloads going in, out and across containers, pods, nodes and clusters. Inspired by Wireshark, purposely built for Kubernetes. hardeneks Runs checks to see if an EKS cluster follows EKS Best Practices. amicontained Container introspection tool. Find out what container runtime is being used as well as features available. kubesec Security risk analysis for Kubernetes resources. kubectl-who-can Show who has RBAC permissions to perform actions on different resources in Kubernetes. etcdctl etcdctl is a command line client for etcd. gitleaks Gitleaks is a SAST tool for detecting and preventing hardcoded secrets like passwords, api keys, and tokens in git repos. Gitleaks is an easy-to-use, all-in-one solution for detecting secrets, past or present, in your code. kubeletctl Kubeletctl is a command line tool that implement kubelet's API. Part of kubelet's API is documented but most of it is not. This tool covers all the documented and undocumented APIs. kube-hunter Hunt for security weaknesses in Kubernetes clusters. netassert Network security testing for Kubernetes DevSecOps workflows. truffleproc hunt secrets in process memory (TruffleHog &amp; gdb mashup) checkpointctl Tool to inspect Kubernetes and Podman checkpoints. ... ..."},{"location":"#build-push","title":"Build &amp; push","text":"<ul> <li>build <pre><code>docker buildx build -t ghcr.io/xopham/k8tlery:$K8TLERY_VERSION -t ghcr.io/xopham/k8tlery:latest .\n</code></pre></li> <li>push <pre><code>docker push ghcr.io/xopham/k8tlery --all-tags\n</code></pre></li> <li>re-tag <pre><code>find ./ -type f -exec sed -i \"s%ghcr\\.io\\/xopham\\/k8tlery\\:v.*%ghcr\\.io\\/xopham\\/k8tlery\\:$K8TLERY_VERSION%g\" {} \\;\n</code></pre></li> </ul>"},{"location":"#usage","title":"Usage","text":""},{"location":"#nix-shell","title":"nix-shell","text":"<pre><code>nix-shell k8tlery.nix\n</code></pre>"},{"location":"#docker","title":"Docker","text":"<pre><code>docker -it --rm ghcr.io/xopham/k8tlery:&lt;tag&gt;\n</code></pre>"},{"location":"#cluster","title":"Cluster","text":"<pre><code>kubectl apply -f deployment/\n#or\nkubectl apply -f deployment/01-roles.yaml\nkubectl apply -f deployment/02-k8tlery.yaml\n#or\nkubectl apply -f deployment/01-roles.yaml\nkubectl apply -f deployment/03-k8tlery-fullaccess.yaml\n</code></pre> <pre><code>kubectl exec -it k8tlery -- bash\n</code></pre>"},{"location":"#audit","title":"Audit","text":""},{"location":"#container-image-forensics","title":"Container image forensics","text":"<ul> <li>download and save image <pre><code>docker pull $IMAGE\ndocker save $IMAGE &gt; image.tar\ndocker image ls\n</code></pre></li> <li>inspect image content <pre><code>docker inspect $IMAGE\ndocker history --no-trunc $IMAGE\n</code></pre></li> <li>inspect image layers (dive) <pre><code>dive $IMAGE\n</code></pre></li> <li>extract file from image.tar (nix-shell custom functions) <pre><code>layer_list $IMAGETAR $LAYERID $FILE  #run 'layer_list' for help\nlayer_extract $IMAGETAR $LAYERID $FILE  #run 'layer_list' for help\n</code></pre></li> <li>create container w/o running it <pre><code>docker create --name container $IMAGE  #returns container ID CONTID\ndocker container ls -a  #displays all available container IDs\n</code></pre></li> <li>inspect container filesystems <pre><code>mkdir $FOLDER\ndocker export $CONTID | tar -xC $FOLDER  #make sure to unpac to dedicated folder\nls -la $FOLDER\n</code></pre></li> </ul>"},{"location":"#container-forensics","title":"Container forensics","text":"<ul> <li>create checkpoint of running container w/o interruption, e.g.: <pre><code>sudo podman container checkpoint -e $OUTPUTFILE $CONTID --leave-running\n</code></pre></li> <li>investigate checkpoint (checkpointctl)<ul> <li>get info <pre><code>checkpointctl show $OUTPUTFILE\n</code></pre></li> <li>get full details <pre><code>checkpointctl inspect $OUTPUTFILE --all\n</code></pre></li> <li>parse memory <pre><code>checkpointctl memparse #OUTPUTFILE --all\n</code></pre></li> <li>inspect container drift <pre><code>tar -xf $OUTPUTFILE -C $TARGETFOLDER\ntar -xf $TARGETFOLDER/rootfs-diff.tar $DIFFFOLDER\n</code></pre></li> </ul> </li> </ul>"},{"location":"#cluster-information-gathering","title":"Cluster information gathering","text":"<ul> <li>misconfiguration scan<ul> <li>trivy <pre><code>trivy k8s --report summary cluster\n</code></pre></li> </ul> </li> </ul>"},{"location":"#podcontainer-information-gathering","title":"Pod/container information gathering","text":"<ul> <li>container runtime <pre><code>cat /proc/self/cgroup\n</code></pre></li> <li>container runtime sockets (might be slow) <pre><code>find /run -type f -name \"*.sock\"  #adjust target folder\n# also need to review '/run' folder manually\n</code></pre></li> <li>hosts information <pre><code>cat /etc/hosts\n</code></pre></li> <li>mount information <pre><code>mount\n</code></pre></li> <li>file system <pre><code>ls -la /\nls -la /home/\nls -la /root/\nls -la /tmp/\n</code></pre></li> <li>environment variables <pre><code>printenv\n</code></pre></li> <li>k8s information<ul> <li>kdigger <pre><code>curl -fSL -o /tmp/kdigger https://github.com/quarkslab/kdigger/releases/download/v1.5.0/kdigger-linux-amd64\nchmod +x /tmp/kdigger\nalias kdigger='/tmp/kdigger'\nkdigger dig all\n</code></pre></li> <li>kube-hunter <pre><code>pip3 install kube-hunter\nkube-hunter --pod\n</code></pre></li> </ul> </li> <li>secrets (trufflehog3) <pre><code>pip3 install trufflehog3\ntrufflehog3 /var/run  #choose relevant target folders\n</code></pre><ul> <li>custom rule <pre><code>#k8s-goat.rule\n- id: k8s-goat.flag\n  message: found k8s-goat flag\n  pattern: \"k8s-goat-\"\n  severity: HIGH\n</code></pre> <pre><code>trufflehog3 -r k8s-goat.rule /tmp  #adjust rule and target\n</code></pre></li> </ul> </li> <li>secrets from process memory (truffleproc): needs work</li> <li>vulnerable packages (trivy) <pre><code>curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin\ntrivy rootfs /\n</code></pre></li> <li>k8s APIs<ul> <li>curl <pre><code>APISERVER=https://${KUBERNETES_SERVICE_HOST}\nSERVICEACCOUNT=/var/run/secrets/kubernetes.io/serviceaccount\nNAMESPACE=$(cat ${SERVICEACCOUNT}/namespace)\nTOKEN=$(cat ${SERVICEACCOUNT}/token)\nCACERT=${SERVICEACCOUNT}/ca.crt\ncurl --cacert ${CACERT} --header \"Authorization: Bearer ${TOKEN}\" -X GET ${APISERVER}/api\n</code></pre></li> <li>peirates <pre><code>curl -fSL -o /tmp/peirates.tar.xz https://github.com/inguardians/peirates/releases/download/v1.1.13/peirates-linux-amd64.tar.xz\ntar -xvf /tmp/peirates.tar.xz -C /tmp\nchmod a+x /tmp/peirates-linux-amd64/peirates\nalias peirates='/tmp/peirates-linux-amd64/peirates'\npeirates\n</code></pre></li> </ul> </li> </ul>"},{"location":"#pod-exploitation","title":"Pod exploitation","text":"<ul> <li>resource exhaustion (DoS) <pre><code>stress-ng --cpu 2 --cpu-load 1 --vm 2 --vm-bytes 100m -t 100s --verify -v  #adjust to use case\n</code></pre></li> <li>various angles (peirates) <pre><code>curl -fSL -o /tmp/peirates.tar.xz https://github.com/inguardians/peirates/releases/download/v1.1.13/peirates-linux-amd64.tar.xz\ntar -xvf /tmp/peirates.tar.xz -C /tmp\nchmod a+x /tmp/peirates-linux-amd64/peirates\nalias peirates='/tmp/peirates-linux-amd64/peirates'\npeirates\n</code></pre></li> </ul>"},{"location":"#references","title":"References","text":"<ul> <li>HackTricks (e.g. pentesting docker, pentesting kubernetes)</li> <li>Kubernetes Goat</li> <li>OWASP Kubernetes Security CS</li> </ul>"},{"location":"KubernetesAPI/KubernetesAPI/","title":"Kubernetes API Spec","text":"SwaggerUI"}]}